/*----------------------------------------------------------------------------*/
/* Copyright (c) FIRST 2008. All Rights Reserved.                             */
/* Open Source Software - may be modified and shared by FRC teams. The code   */
/* must be accompanied by the FIRST BSD license file in the root directory of */
/* the project.                                                               */
/*----------------------------------------------------------------------------*/

package edu.wpi.first.wpilibj.templates;


import NerdHerd.NerdyPIDRobot;
import com.sun.squawk.util.MathUtils;
import edu.wpi.first.wpilibj.CANJaguar;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.Timer;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class RobotTemplate extends IterativeRobot {
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    
    CANJaguar LtDriveMain, LtDriveSub, RtDriveMain, RtDriveSub;
    Joystick Joystick1;
    NerdyPIDRobot Robot;
    
    public void robotInit() {
        
        Joystick1 = new Joystick(2);
        Robot = new NerdyPIDRobot();
        
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {

    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        System.out.println("Hello");
        
        Robot.Compass.read();
        Robot.timer.delay(.050);
        System.out.println("Y is : " + Robot.Compass.getAxisY());
        System.out.println("X is : " + Robot.Compass.getAxisX());
        
        double z = MathUtils.atan(Robot.Compass.getAxisY()/Robot.Compass.getAxisX())/Math.PI*180 +180;
        System.out.println("Heading Offset is : " + Robot.headingOffset);
        System.out.println("z is : " + z);
        
        
    }
    
    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
    
    }
    
}
